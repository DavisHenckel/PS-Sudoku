name: Mac OS Validation

on:
  pull_request:
    branches: [ main ]
    types: [closed]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  # Name of the job
  MacOS-Latest:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@main

      #Define modules to cache
      - name: Define requires PowerShell Modules
        id: psmodulecache
        uses: potatoqualitee/psmodulecache@v1
        with:
          modules-to-cache: Pester, PSScriptAnalyzer, InvokeBuild, platyPS
      
      # Setup module cache
      - name: Setup PowerShell module cache
        id: cacher
        uses: actions/cache@v2
        with:
          path: ${{ steps.psmodulecache.outputs.modulepath }}
          key: ${{ steps.psmodulecache.outputs.keygen }}
      
      #Install the powershell module if not found in the cache
      - name: Install required PowerShell modules
        
        shell: pwsh
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module ${{ steps.psmodulecache.outputs.needed }} -ErrorAction Stop

      # Runs a set of commands using the runners shell
      - name: Setup Environment
        shell: pwsh
        run: ./build.ps1 "ImportModules"
      
      - name: Run Script Analyzer
        shell: pwsh
        run: ./build.ps1 "RunPSScriptAnalyzer"

      - name: Run Unit Tests
        shell: pwsh
        run: ./build.ps1 "RunUnitTests"

      - name: Run Integration Tests
        shell: pwsh
        run: ./build.ps1 "RunIntegrationTests"

      - name: Run Acceptance Tests
        shell: pwsh
        run: ./build.ps1 "RunAcceptanceTests"

  MacOS-11:
    runs-on: macos-11
    steps:
      - uses: actions/checkout@main

      #Define modules to cache
      - name: Define requires PowerShell Modules
        id: psmodulecache
        uses: potatoqualitee/psmodulecache@v1
        with:
          modules-to-cache: Pester, PSScriptAnalyzer, InvokeBuild, platyPS
      
      # Setup module cache
      - name: Setup PowerShell module cache
        id: cacher
        uses: actions/cache@v2
        with:
          path: ${{ steps.psmodulecache.outputs.modulepath }}
          key: ${{ steps.psmodulecache.outputs.keygen }}
      
      #Install the powershell module if not found in the cache
      - name: Install required PowerShell modules
        
        shell: pwsh
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module ${{ steps.psmodulecache.outputs.needed }} -ErrorAction Stop

      # Runs a set of commands using the runners shell
      - name: Setup Environment
        shell: pwsh
        run: ./build.ps1 "ImportModules"
      
      - name: Run Script Analyzer
        shell: pwsh
        run: ./build.ps1 "RunPSScriptAnalyzer"

      - name: Run Unit Tests
        shell: pwsh
        run: ./build.ps1 "RunUnitTests"

      - name: Run Integration Tests
        shell: pwsh
        run: ./build.ps1 "RunIntegrationTests"

      - name: Run Acceptance Tests
        shell: pwsh
        run: ./build.ps1 "RunAcceptanceTests"


  MacOS-10:
    runs-on: macos-10.15
    steps:
      - uses: actions/checkout@main

      #Define modules to cache
      - name: Define requires PowerShell Modules
        id: psmodulecache
        uses: potatoqualitee/psmodulecache@v1
        with:
          modules-to-cache: Pester, PSScriptAnalyzer, InvokeBuild, platyPS
      
      # Setup module cache
      - name: Setup PowerShell module cache
        id: cacher
        uses: actions/cache@v2
        with:
          path: ${{ steps.psmodulecache.outputs.modulepath }}
          key: ${{ steps.psmodulecache.outputs.keygen }}
      
      #Install the powershell module if not found in the cache
      - name: Install required PowerShell modules
        
        shell: pwsh
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module ${{ steps.psmodulecache.outputs.needed }} -ErrorAction Stop

      # Runs a set of commands using the runners shell
      - name: Setup Environment
        shell: pwsh
        run: ./build.ps1 "ImportModules"
      
      - name: Run Script Analyzer
        shell: pwsh
        run: ./build.ps1 "RunPSScriptAnalyzer"

      - name: Run Unit Tests
        shell: pwsh
        run: ./build.ps1 "RunUnitTests"

      - name: Run Integration Tests
        shell: pwsh
        run: ./build.ps1 "RunIntegrationTests"

      - name: Run Acceptance Tests
        shell: pwsh
        run: ./build.ps1 "RunAcceptanceTests"